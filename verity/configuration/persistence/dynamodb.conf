agency {

  dynamodb-common {
    # The service endpoint to connect to for the DynamoDB instance that
    # shall be used. Please refer to the AWS documentation for details.
    endpoint =  "localhost:8000" # or where your deployment is
    journal-name = "agency_event"
    aws-access-key-id = "<enter aws-access-key-id>"
    aws-secret-access-key = "<enter aws-secret-access-key>"

    # If this is set to `on` then every DynamoDB request will be logged
    # at DEBUG level. Caution: this will generate A LOT of output.
    tracing = off

    # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
    aws-api-limits {
      max-batch-get = 100
      max-batch-write = 25
      max-item-size = 400000
    }

    # AWS client configuration settings, see
    # http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/?com/amazonaws/ClientConfiguration.html
    #
    # (setting any of these to the string "default" means that the corresponding
    # setter method on the ClientConfiguration will not be invoked)
    aws-client-config {
      client-execution-timeout = default     # int
      connection-max-idle-millis = default   # long
      connection-timeout = default           # int
      connection-ttl = default               # long
      local-address = default                # InetAddress
      max-connections = default              # int
      max-error-retry = default              # int
      preemptive-basic-proxy-auth = default  # boolean
      protocol = HTTP            # HTTP or HTTPS
      proxy-domain = default                 # string
      proxy-host = default                   # string
      proxy-password = default               # string
      proxy-port = default                   # int
      proxy-username = default               # string
      proxy-workstation = default            # string
      request-timeout = default              # int
      response-metadata-cache-size = default # int
      signer-override = default              # string
      socket-buffer-size-hints = default     # [ int, int ] (for send & receive)
      socket-timeout = default               # int
      use-expect-continue = default          # boolean
      use-gzip = default                     # boolean
      use-reaper = default                   # boolean
      use-tcp-keepalive = default            # boolean
      user-agent = default                   # string
    }
    dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-max = 8
      }
    }
  }

  dynamodb-journal {
    # The logical journal name, used in the partition keys.
    journal-table = "verity_akka_application"

    # The service endpoint to connect to for the DynamoDB instance that
    # shall be used. Please refer to the AWS documentation for details.
    endpoint = ${agency.dynamodb-common.endpoint}

    # The logical journal name, used in the partition keys.
    journal-name = ${agency.dynamodb-common.journal-name}

    # The AWS key ID to use for connecting to the specified endpoint.
    aws-access-key-id = ${agency.dynamodb-common.aws-access-key-id}

    # The AWS secret to use in conjuction with the AWS key ID.
    aws-secret-access-key = ${agency.dynamodb-common.aws-secret-access-key}

    aws-client-config = ${agency.dynamodb-common.aws-client-config}

    # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
    aws-api-limits = ${agency.dynamodb-common.aws-api-limits}

    # If this is set to `on` then every DynamoDB request will be logged
    # at DEBUG level. Caution: this will generate A LOT of output.
    tracing = ${agency.dynamodb-common.tracing}

    # The FQCN for the journal plugin implementation - DO NOT CHANGE
    class = "akka.persistence.dynamodb.journal.DynamoDBJournal"

    # The dispatcher that executes the replay logic for this plugin
    # instance - should not normally need to be changed.
    replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

    # The dispatcher that executes the write logic for this plugin
    # instance - should not normally need to be changed.
    plugin-dispatcher = "dynamodb-journal.dispatcher"

    # The number of shards to distribute the sequence number items over.
    sequence-shards = 10

    # number of concurrently running replay prefetch operations for a
    # single PersistentActor; this prefetch means that during a replay
    # more events might be retrieved than specified with the `max`
    # parameter, with corresponding usage DynamoDB read units
    replay-parallelism = 10

    # Set to `on` to log the detected configuration at INFO level at plugin startup.
    log-config = off

    # The dispatcher that executes the future combinators needed for
    # transforming the AmazonDynamoDBAsyncClient results (i.e.
    # handling the back-off etc.)
    client-dispatcher = "dynamodb-journal.dispatcher"
  }

  dynamodb-snapshot-store {
    class="akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"
    endpoint = ${agency.dynamodb-common.endpoint}
    client-dispatcher = "dynamodb-journal.dispatcher"
    snapshot-table = "verity_akka_snapshot_application"
    journal-name = ${agency.dynamodb-common.journal-name}
    aws-access-key-id = ${agency.dynamodb-common.aws-access-key-id}
    aws-secret-access-key = ${agency.dynamodb-common.aws-secret-access-key}

    # If this is set to `on` then every DynamoDB request will be logged
    # at DEBUG level. Caution: this will generate A LOT of output.
    tracing = ${agency.dynamodb-common.tracing}

    aws-client-config =${agency.dynamodb-common.aws-client-config}

    # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
    aws-api-limits = ${agency.dynamodb-common.aws-api-limits}
  }
}
